from RL.vf_TR_class import value_function_TR
import datetime, copy
import torch
import argparse

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Train a value function using the trajectories generated by an agent')
    parser.add_argument('--project', type=str, help='Path to the model to be used for generating data points and trajectories')
    parser.add_argument('--model_name', type=str, help='Path to the model to be used for generating data points and trajectories')
    parser.add_argument('--algorithm', type=str, help='Path to the environment to be used for generating data points and trajectories')
    parser.add_argument('--stochastic', action='store_true', help='Flag to indicate if the simulation should be stochastic')
    args = parser.parse_args()
    # Load model and environment
    path = f"train_data/{args.project}/{args.algorithm}"

    if args.stochastic:
        model_path = f"{path}/stochastic/models/{args.model_name}.zip"
        env_path = f"{path}/stochastic/envs/{args.model_name}.pkl"
    else:
        model_path = f"{path}/deterministic/models/{args.model_name}.zip"
        env_path = f"{path}/deterministic/envs/{args.model_name}.pkl"

    # Create value function
    my_value_function = value_function_TR(
        input_dim=2,
        hidden_dim=128,
        learning_rate=1e-3,
        batch_size=128,
        reduced= True
    )

    # Generate data points and trajectories using the specified model and environment
    data_points, trajectories = my_value_function.sim_with_agent(
        num_traj = 1,
        spread = 0.5,
        model_path = model_path, 
        env_path = env_path, 
        stochastic = False
    )

    # Train the value function
    my_vf = value_function_TR(
        input_dim=2,
        hidden_dim=8,
        learning_rate=1e-3,
        batch_size=1024,
        reduced= True
    )

    my_vf.values  = copy.deepcopy(my_value_function.values)
    my_vf.trajectories = copy.deepcopy(my_value_function.trajectories)
    my_vf.train(epochs=200)

    # Save the value function
    # Import arguments
    # if len(sys.argv) > 1:
    #     T = int(sys.argv[1])
    #     job_desc = "rlmpc_" + str(T) + "hr"
    #     job_id = sys.argv[2]
    # else:
    #     T = 1
    #     job_desc = "None"
    #     job_id = "0"
    #     print("No arguments provided, using default values")
    # print(f"Time horizon: {T} hours")
    # print(f"Job description: {job_desc}")

    # Create folders for export
    current_day_time = datetime.datetime.now().strftime("%Y%m%d_%H%M")
    save_path = "models/VF/Deterministic/" + current_day_time + "agent_11_abs_tr_8_shallow.zip"
    torch.save (my_vf.neural_net, save_path)

